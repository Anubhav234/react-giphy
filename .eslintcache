[{"D:\\giphy\\src\\index.js":"1","D:\\giphy\\src\\App.jsx":"2","D:\\giphy\\src\\component\\Giphy.jsx":"3","D:\\giphy\\src\\component\\Loader.jsx":"4","D:\\giphy\\src\\component\\Paginate.jsx":"5"},{"size":148,"mtime":1610448913927,"results":"6","hashOfConfig":"7"},{"size":208,"mtime":1610457916437,"results":"8","hashOfConfig":"7"},{"size":3265,"mtime":1610474028705,"results":"9","hashOfConfig":"7"},{"size":222,"mtime":1610459502716,"results":"10","hashOfConfig":"7"},{"size":789,"mtime":1610473824298,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ot97a3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"D:\\giphy\\src\\index.js",[],["25","26"],"D:\\giphy\\src\\App.jsx",[],"D:\\giphy\\src\\component\\Giphy.jsx",["27","28"],"import React , {useEffect,useState}from 'react';\r\nimport axios from 'axios';\r\nimport Loader from './Loader';\r\nimport Paginate from \"./Paginate\";\r\n\r\n\r\nconst Giphy = () => {\r\n    const[data,setData]=useState([])\r\n    const[isloading,setIsLoading]=useState(false)\r\n    const[isError,setIsError]=useState(false)\r\n    const[search,setSearch]=useState(\"\")\r\n    const[currentPage,setCurrentPage]=useState(1)\r\n    const[itemsPerPage,setItemsPerPage]=useState(15)\r\n    const indexOfLastItem=currentPage*itemsPerPage;\r\n    const indexOfFirstItem=indexOfLastItem-itemsPerPage\r\n    const currentItems=data.slice(indexOfFirstItem,indexOfLastItem)\r\n    useEffect(()=>{\r\n        const fetchData= async()=>{\r\n            setIsError(false)\r\n            setIsLoading(true)\r\n\r\n            try{\r\n                 const result = await axios(\"http://api.giphy.com/v1/gifs/trending\",{\r\n                params:{\r\n                    api_key:\"qiao5HUctD63jTeE4suFKCTE0AuvBRMV\",\r\n                   limit:10000000000000\r\n                }\r\n            })\r\n            console.log(result)\r\nsetData(result.data.data)\r\n\r\n            }\r\n            catch(err){\r\n               setIsError(true)\r\n               setTimeout(() =>setIsError(false))\r\n                   \r\n               \r\n            }\r\n           \r\n\r\nsetIsLoading(false)\r\n        }\r\n        fetchData()\r\n    },[])\r\n    const rendergifs=()=>{\r\n        if(isloading){\r\n            return <div className=\"loader\"><Loader/></div>\r\n        }\r\n        return currentItems.map(el=>{\r\n            return (\r\n               <div key={el.id} className=\"gif\">\r\n                   <img src={el.images.fixed_height.url}/>\r\n               </div>\r\n            )\r\n        })\r\n    }\r\n    const renderError=()=>{\r\n        if(isError){\r\n            return(\r\n                <div className=\"alert alert-danger alert-dismissible fade show \" role=\"alert\">\r\n                    Unable to get Gifs.Please try again later.<buttton></buttton>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n    const handleSearchChange=(event)=>{\r\n        setSearch(event.target.value)\r\n    }\r\n    const handleSubmit= async event =>{\r\n       event.preventDefault()\r\n       setIsError(false)\r\n       setIsLoading(true)\r\n\r\n            const result=await axios(\"https://api.giphy.com/v1/gifs/search\",{\r\n                params:{api_key:\"qiao5HUctD63jTeE4suFKCTE0AuvBRMV\",\r\n                q:search\r\n\r\n                }\r\n            })\r\n            setData(result.data.data)\r\n            setIsLoading(false)\r\n        \r\n\r\n    }\r\n    const pageSelected=(pagenumber)=>{\r\n        setCurrentPage(pagenumber)\r\n\r\n    }\r\n    return (\r\n        <div className=\"m-2\">{renderError()}\r\n        <form className=\"form-inline justify-content-center m-2\">\r\n            <input value={search} onChange={handleSearchChange} type=\"text\" placeholder=\"search\" className=\"form-control\"/>\r\n            <button onClick={handleSubmit} type=\"submit\" className=\"btn btn-primary mx-2\">Go</button>\r\n        </form>\r\n            <Paginate pageSelected={pageSelected} currentPage={currentPage} itemsPerPage={itemsPerPage} totalItems={data.length}/>\r\n\r\n        <div className=\"container gifs\">\r\n        {rendergifs()}\r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Giphy;\r\n","D:\\giphy\\src\\component\\Loader.jsx",[],"D:\\giphy\\src\\component\\Paginate.jsx",["29"],"import React from 'react';\r\n\r\nconst Paginate = props => {\r\n    const pagenumbers=[];\r\n    for(let i=1;i<=Math.ceil(props.totalItems/props.itemsPerPage);i++){\r\n        pagenumbers.push(i)\r\n    }\r\n    return (\r\n   <nav>\r\n       <ul className=\"pagination pagination-sm justify-content-end border-0\">\r\n           {pagenumbers.map(number=>{\r\n               let classes=\"page-item\";\r\n               if(number==props.currentPage){\r\n                   classes +=\"active\";\r\n               }\r\n               return(\r\n                   <li className={classes}>\r\n                        <a  onClick={()=>props.pageSelected(number)} href=\"!#\" className=\"page-link\">{number}</a>\r\n                   </li>\r\n               )\r\n           })}\r\n       </ul>\r\n   </nav>\r\n    )\r\n}\r\n\r\nexport default Paginate\r\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":13,"column":24,"nodeType":"36","messageId":"37","endLine":13,"endColumn":39},{"ruleId":"38","severity":1,"message":"39","line":52,"column":20,"nodeType":"40","endLine":52,"endColumn":59},{"ruleId":"41","severity":1,"message":"42","line":13,"column":25,"nodeType":"43","messageId":"44","endLine":13,"endColumn":27},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'setItemsPerPage' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]